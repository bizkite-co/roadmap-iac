---
- name: Deploy ACM Certificates and Update Apache Config on remote servers
  hosts: "{{ target_host | default('UAT') }}" # Use a variable for the target host/group, defaulting to UAT
  become: yes
  user: ubuntu
  vars:
    # Define variables for ACM certificate ARNs - these should be passed as extra vars
    retirement_tax_analyzer_cert_arn: "{{ retirement_tax_analyzer_cert_arn }}"
    roadmap_partners_cert_arn: "{{ roadmap_partners_cert_arn }}"
    # Define paths for the deployed certificates on the EC2 instance
    retirement_tax_analyzer_cert_path: "/etc/ssl/certs/retirementtaxanalyzer.crt"
    roadmap_partners_cert_path: "/etc/ssl/certs/roadmappartners.net.crt"
    godaddy_chain_path: "/etc/ssl/certs/godaddy-chain.crt" # This might still be needed if ACM chain is different or for compatibility

  tasks:
    - name: Ensure AWS CLI is installed (if not already present)
      package:
        name: awscli
        state: present

    - name: Create backup directory for old certs
      file:
        path: "/etc/ssl/certs/backup_{{ ansible_date_time.iso8601_basic_short }}"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Backup existing RetirementTaxAnalyzer cert file
      copy:
        src: "{{ retirement_tax_analyzer_cert_path }}"
        dest: "/etc/ssl/certs/backup_{{ ansible_date_time.iso8601_basic_short }}/retirementtaxanalyzer.crt.bak"
        remote_src: yes
      failed_when: false # Allow this task to fail if the source file doesn't exist

    - name: Backup existing RoadmapPartners cert file
      copy:
        src: "{{ roadmap_partners_cert_path }}"
        dest: "/etc/ssl/certs/backup_{{ ansible_date_time.iso8601_basic_short }}/roadmapparterns.net.crt.bak"
        remote_src: yes
      failed_when: false # Allow this task to fail if the source file doesn't exist

    - name: Backup existing Apache SSL configuration file
      copy:
        src: "/etc/apache2/sites-available/default-ssl.conf"
        dest: "/etc/ssl/certs/backup_{{ ansible_date_time.iso8601_basic_short }}/default-ssl.conf.bak"
        remote_src: yes
      failed_when: false # Allow this task to fail if the source file doesn't exist

    - name: Fetch RetirementTaxAnalyzer certificate from ACM
      shell: "aws acm get-certificate --certificate-arn {{ retirement_tax_analyzer_cert_arn }} --output json"
      register: retirementtaxanalyzer_acm_cert
      environment:
        AWS_REGION: "{{ ansible_facts.aws_region }}" # Use gathered fact for region

    - name: Write RetirementTaxAnalyzer certificate body to file
      copy:
        content: "{{ retirementtaxanalyzer_acm_cert.stdout | from_json | json_query('Certificate') }}"
        dest: "{{ retirement_tax_analyzer_cert_path }}"
        owner: root
        group: root
        mode: '0644'

    - name: Write RetirementTaxAnalyzer certificate chain to file
      copy:
        content: "{{ retirementtaxanalyzer_acm_cert.stdout | from_json | json_query('CertificateChain') }}"
        dest: "{{ godaddy_chain_path }}" # Assuming ACM chain can replace GoDaddy chain
        owner: root
        group: root
        mode: '0644'

    - name: Fetch RoadmapPartners certificate from ACM
      shell: "aws acm get-certificate --certificate-arn {{ roadmap_partners_cert_arn }} --output json"
      register: roadmappartners_acm_cert
      environment:
        AWS_REGION: "{{ ansible_facts.aws_region }}" # Use gathered fact for region

    - name: Write RoadmapPartners certificate body to file
      copy:
        content: "{{ roadmappartners_acm_cert.stdout | from_json | json_query('Certificate') }}"
        dest: "{{ roadmap_partners_cert_path }}"
        owner: root
        group: root
        mode: '0644'

    - name: Write RoadmapPartners certificate chain to file (if different from RetirementTaxAnalyzer)
      copy:
        content: "{{ roadmappartners_acm_cert.stdout | from_json | json_query('CertificateChain') }}"
        dest: "{{ godaddy_chain_path }}" # Overwrite if different, or handle separately if needed
        owner: root
        group: root
        mode: '0644'
      # Consider adding a condition here if the chains might be different and need separate files

    - name: Update Apache SSL configuration file
      copy:
        content: |
          <IfModule mod_ssl.c>
          	<VirtualHost *:443>
          		ServerAdmin webmaster@localhost
          		ServerName uat.roadmappartners.net # Update ServerName if needed for PROD

          		DocumentRoot /var/www/html

          		ErrorLog ${APACHE_LOG_DIR}/error.log
          		CustomLog ${APACHE_LOG_DIR}/access.log combined

                      JkMount /manager worker1
                      JkMount /manager/* worker1

                      JkMount /roadmap worker1
                      JkMount /roadmap/* worker1

          		SSLEngine on

          		SSLCertificateFile      {{ roadmap_partners_cert_path }}
          		SSLCertificateKeyFile /etc/ssl/private/wildcard.roadmappartners.key # Assuming key file remains local
          		SSLCertificateChainFile {{ godaddy_chain_path }}

          		<FilesMatch "\.(cgi|shtml|phtml|php)$">
          				SSLOptions +StdEnvVars
          		</FilesMatch>
          		<Directory /usr/lib/cgi-bin>
          				SSLOptions +StdEnvVars
          		</Directory>

          	</VirtualHost>

              <VirtualHost *:443>
                  ServerAdmin webmaster@localhost
                  ServerName retirementtaxanalyzer.com # Update ServerName if needed for PROD

                  DocumentRoot /var/www/html

                  ErrorLog ${APACHE_LOG_DIR}/error.log
                  CustomLog ${APACHE_LOG_DIR}/access.log combined

                  JkMount /manager worker1
                  JkMount /manager/* worker1

                  JkMount /roadmap worker1
                  JkMount /roadmap/* worker1

                  SSLEngine on

                  SSLCertificateFile      {{ retirement_tax_analyzer_cert_path }}
                  SSLCertificateKeyFile /etc/ssl/private/retirementtaxanalyzer.key # Assuming key file remains local
                  SSLCertificateChainFile {{ godaddy_chain_path }}

                  <FilesMatch "\.(cgi|shtml|phtml|php)$">
                          SSLOptions +StdEnvVars
                  </FilesMatch>
                  <Directory /usr/lib/cgi-bin>
                          SSLOptions +StdEnvVars
                  </Directory>

              </VirtualHost>
          </IfModule>

          # vim: syntax=apache ts=4 sw=4 sts=4 sr noet
        dest: "/etc/apache2/sites-available/default-ssl.conf"
        owner: root
        group: root
        mode: '0644'
      become: yes

    - name: Test Apache configuration syntax
      command: apache2ctl configtest
      register: apache_config_test
      changed_when: apache_config_test.rc != 0
      failed_when: apache_config_test.rc != 0
      become: yes

    - name: Restart Apache
      service:
        name: apache2
        state: restarted
      become: yes

    - name: Verify deployed RetirementTaxAnalyzer certificate is valid and correct
      shell: |
        openssl s_client -connect retirementtaxanalyzer.com:443 -servername retirementtaxanalyzer.com < /dev/null 2>/dev/null > /tmp/retirementtaxanalyzer_cert_output.txt;
        CERT_OUTPUT=$(cat /tmp/retirementtaxanalyzer_cert_output.txt);
        echo "$CERT_OUTPUT" | openssl x509 -checkend 31536000; # Check if valid for > 1 year (31536000 seconds)
        echo "$CERT_OUTPUT" | grep 'Subject: CN = retirementtaxanalyzer.com';
        rm /tmp/retirementtaxanalyzer_cert_output.txt;
      register: retirementtaxanalyzer_cert_check
      ignore_errors: yes # Allow this check to fail without stopping the playbook

    - name: Assert RetirementTaxAnalyzer certificate is correct and valid for > 1 year
      assert:
        that:
          - retirementtaxanalyzer_cert_check.rc == 0 # Check if the shell command (including checkend and grep) succeeded
        fail_msg: "RetirementTaxAnalyzer certificate verification failed or expires within 1 year."
      when: retirementtaxanalyzer_cert_check is defined

    - name: Verify deployed RoadmapPartners certificate is valid and correct
      shell: |
        openssl s_client -connect roadmappartners.net:443 -servername roadmappartners.net < /dev/null 2>/dev/null > /tmp/roadmappartners_cert_output.txt;
        CERT_OUTPUT=$(cat /tmp/roadmappartners_cert_output.txt);
        echo "$CERT_OUTPUT" | openssl x509 -checkend 31536000; # Check if valid for > 1 year (31536000 seconds)
        echo "$CERT_OUTPUT" | grep 'Subject: CN = *.roadmappartners.net';
        rm /tmp/roadmappartners_cert_output.txt;
      register: roadmappartners_cert_check
      ignore_errors: yes # Allow this check to fail without stopping the playbook

    - name: Assert RoadmapPartners certificate is correct and valid for > 1 year
      assert:
        that:
          - roadmappartners_cert_check.rc == 0 # Check if the shell command (including checkend and grep) succeeded
        fail_msg: "RoadmapPartners certificate verification failed or expires within 1 year."
      when: roadmappartners_cert_check is defined
