Resources:
  singletonServiceRole9C9ECF4A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/singleton/ServiceRole/Resource
  singletonServiceRoleDefaultPolicyFDD8CA90:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:StartInstances
              - ec2:StopInstances
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: singletonServiceRoleDefaultPolicyFDD8CA90
      Roles:
        - Ref: singletonServiceRole9C9ECF4A
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/singleton/ServiceRole/DefaultPolicy/Resource
  singleton69FEA30F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import traceback
          import time


          def get_target_ec2_instances(ec2_client):
              # type: (boto3.EC2.Client) -> list[dict]
              """Return EC2 instance IDs for start or stop.

              :return: A list of dictionaries has EC2 instance ID and instance name getted from tag "Name".
                  Example: [{"instance_id": "abcdefg1234567890", "instance_name": "demo-instance"}]
              """

              response = ec2_client.describe_instances(
                  Filters=[{"Name": "tag:AutoStartStop", "Values": ["TRUE"]}]
              )

              target_instances = []
              for reservation in response["Reservations"]:
                  if "Instances" in reservation.keys() and len(reservation["Instances"]) > 0:
                      for instance in reservation["Instances"]:
                          if (
                              instance["State"]["Name"] == "running"
                              or instance["State"]["Name"] == "stopped"
                          ):
                              instance_name = ""
                              for tag in instance["Tags"]:
                                  if tag["Key"] == "Name":
                                      instance_name = tag["Value"]
                                      break

                              target_instances.append(
                                  {
                                      "instance_id": instance["InstanceId"],
                                      "instance_name": instance_name,
                                  }
                              )

              return target_instances


          def start_stop_instance(ec2_client, instance, action):
              # type: (boto3.EC2.Client, dict, str) -> bool
              if action == "start":
                  return start_instance(ec2_client, instance)
              elif action == "stop":
                  return stop_instance(ec2_client, instance)
              elif action == "stopstart":
                  stop_instance(ec2_client, instance)
                  time.sleep(300)
                  return start_instance(ec2_client, instance)
              else:
                  print("Invalid action.")
                  return False


          def start_instance(ec2_client, instance):
              # type: (boto3.EC2.Client, dict) -> bool
              try:
                  print(
                      "starting instance (ID: {id} Name: {name})".format(
                          id=instance["instance_id"], name=instance["instance_name"]
                      )
                  )

                  res = ec2_client.start_instances(InstanceIds=[instance["instance_id"]])
                  print(res)

                  return True
              except Exception:
                  print("[ERROR] failed to start an EC2 instance.")
                  print(traceback.format_exc())
                  return False


          def stop_instance(ec2_client, instance):
              # type: (boto3.EC2.Client, dict) -> bool
              try:
                  print(
                      "stopping instance (ID: {id} Name: {name})".format(
                          id=instance["instance_id"], name=instance["instance_name"]
                      )
                  )

                  res = ec2_client.stop_instances(InstanceIds=[instance["instance_id"]])
                  print(res)

                  return True
              except Exception:
                  print("[ERROR] failed to stop an EC2 instance.")
                  print(traceback.format_exc())
                  return False


          def return_response(status_code, message):
              # type: (int, str) -> dict
              return {"statusCode": status_code, "message": message}


          def main(event, context):
              # type: (dict, dict) -> dict
              try:
                  region = event["Region"]
                  action = event["Action"]

                  if action not in ["start", "stop", "stopstart"]:
                      message = 'Invalid action. "action" support "start", "stop", or "stopstart".'
                      print(message)
                      return_response(400, message)

                  client = boto3.client("ec2", region)
                  target_instances = get_target_ec2_instances(client)

                  if len(target_instances) == 0:
                      message = "There are no instances subject to automatic {}.".format(action)
                      print(message)
                      return_response(200, message)

                  for instance in target_instances:
                      start_stop_instance(client, instance, action)

                  return {
                      "statusCode": 200,
                      "message": (
                          "Finished automatic {action} EC2 instances process. "
                          "[Region: {region}, Action: {action}]"
                      ).format(region=event["Region"], action=event["Action"]),
                  }
              except Exception:
                  print(traceback.format_exc())
                  return {
                      "statusCode": 500,
                      "message": "An error occured at automatic start / stop EC2 instances process.",
                  }
        Handler: index.main
      Role:
        Fn::GetAtt:
          - singletonServiceRole9C9ECF4A
          - Arn
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - singletonServiceRoleDefaultPolicyFDD8CA90
      - singletonServiceRole9C9ECF4A
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/singleton/Resource
  StopRule00306666:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 2 * * ? *)
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - singleton69FEA30F
            - Arn
          Id: Target0
          Input: '{"Region":"us-west-1","Action":"stop"}'
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/StopRule/Resource
  StopRuleAllowEventRuleAutoStartStopEc2StacksingletonEDB1E85E1775E350:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - singleton69FEA30F
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - StopRule00306666
          - Arn
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/StopRule/AllowEventRuleAutoStartStopEc2StacksingletonEDB1E85E
  StartRuleProd40F02F2E:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(5 7 ? * FRI *)
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - singleton69FEA30F
            - Arn
          Id: Target0
          Input: '{"Region":"us-west-1","Action":"start"}'
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/StartRule/Resource
  StartRuleAllowEventRuleAutoStartStopEc2StacksingletonEDB1E85E48E1A3C9:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - singleton69FEA30F
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - StartRule40F02F2E
          - Arn
      Metadata:
        aws:cdk:path: AutoStartStopEc2Stack/StartRule/AllowEventRuleAutoStartStopEc2StacksingletonEDB1E85E
  e2eTestLambdaServiceRoleE7369445:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/e2eTestLambda/ServiceRole/Resource
  e2eTestLambdaServiceRoleDefaultPolicyD459CEDC:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
              - s3:PutObject
              - sns:Publish
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: e2eTestLambdaServiceRoleDefaultPolicyD459CEDC
      Roles:
        - Ref: e2eTestLambdaServiceRoleE7369445
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/e2eTestLambda/ServiceRole/DefaultPolicy/Resource
  e2eTestLambdaABF52E70:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          import os
          import subprocess
          import json
          import boto3

          def main(event, context):
              try:
                  # Run the Playwright test
                  process = subprocess.run(['npx', 'playwright', 'test', 'e2e/login.test.ts'],
                                            capture_output=True, text=True, check=True, env=os.environ)

                  print("Test output:", process.stdout)

                  # If the test passes, do nothing
                  if "tests passed" in process.stdout:
                      print("E2E test passed")
                      return {
                          'statusCode': 200,
                          'body': json.dumps('E2E test passed!')
                      }
                  else:
                      raise Exception("E2E test failed")

              except subprocess.CalledProcessError as e:
                  print("Test failed with error:", e.stderr)
                  send_sns_notification(e.stderr)
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'E2E test failed: {e.stderr}')
                  }
              except Exception as e:
                  print("Test failed with exception:", str(e))
                  send_sns_notification(str(e))
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'E2E test failed: {str(e)}')
                  }

          def send_sns_notification(message):
              sns_topic_arn = os.environ.get('SNS_TOPIC_ARN')
              if sns_topic_arn:
                  sns_client = boto3.client('sns')
                  try:
                      sns_client.publish(
                          TopicArn=sns_topic_arn,
                          Message=message,
                          Subject='E2E Test Failed'
                      )
                      print("SNS notification sent")
                  except Exception as e:
                      print("Failed to send SNS notification:", str(e))
              else:
                  print("SNS_TOPIC_ARN environment variable not set. Skipping SNS notification.")
      Environment:
        Variables:
          SNS_TOPIC_ARN: arn:aws:sns:us-west-1:318364255844:site-down
      Handler: main
      Role:
        Fn::GetAtt:
          - e2eTestLambdaServiceRoleE7369445
          - Arn
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - e2eTestLambdaServiceRoleDefaultPolicyD459CEDC
      - e2eTestLambdaServiceRoleE7369445
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/e2eTestLambda/Resource
  e2eTestRule0EDBA3FB9:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 13 ? * MON-FRI *)
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - e2eTestLambdaABF52E70
            - Arn
          Id: Target0
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/e2eTestRule0/Resource
  e2eTestRule0AllowEventRuleAutoStartStopEc2Stacke2eTestLambdaFE5D20F09E0CD0BD:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - e2eTestLambdaABF52E70
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - e2eTestRule0EDBA3FB9
          - Arn
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/e2eTestRule0/AllowEventRuleAutoStartStopEc2Stacke2eTestLambdaFE5D20F0
  e2eTestRule1B9F6E07B:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 20 ? * MON-FRI *)
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - e2eTestLambdaABF52E70
            - Arn
          Id: Target0
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/e2eTestRule1/Resource
  e2eTestRule1AllowEventRuleAutoStartStopEc2Stacke2eTestLambdaFE5D20F0E1DFD8C1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - e2eTestLambdaABF52E70
        - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - e2eTestRule1B9F6E07B
        - Arn
      Metadata:
        aws:cdk:path: AutoStartStopEc2Stack/e2eTestRule1/AllowEventRuleAutoStartStopEc2Stacke2eTestLambdaFE5D20F0
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/02Kyw6CMBBFv4V9GYHowrWJW0n9AFPKmAz0QZgWYpr+u7G6cHVO7j0dtOcjNJXaudbjXBsaIN2D0rNQOz+SUXYYFaRrdDqQd+LydP/e42qJmbzLgpSFJL3Bz1HYe0P6VbpiWeCGLjAkGX9ZNJizkMg+rrpMtxiWGLJwfkSY+LB1HbQnaKqJieo1ukAWQX75BiP3nJTAAAAA
    Metadata:
      aws:cdk:path: AutoStartStopEc2Stack/CDKMetadata/Default
Outputs:
  AutoStartStopLambdaArn:
    Description: The ARN of the Lambda function that starts and stops the EC2 instances.
    Value: arn:aws:lambda:us-west-1:318364255844:function:AutoStartStopEc2Stack-singleton69FEA30F-aEPfSLjG5qWQ
  E2eTestLambdaArn:
    Description: The ARN of the Lambda function that runs the E2E tests.
    Value:
      Fn::GetAtt:
        - e2eTestLambdaABF52E70
        - Arn
  SnsTopicArn:
    Description: The ARN of the SNS topic that receives failure notifications.
    Value: arn:aws:sns:us-west-1:318364255844:site-down
  StopRuleName:
    Description: The name of the CloudWatch Event Rule that stops the EC2 instances.
    Value:
      Ref: StopRule00306666
  StartRuleName:
    Description: The name of the CloudWatch Event Rule that starts the EC2 instances.
    Value:
      Ref: StartRule40F02F2E
  E2eTestRuleName0:
    Description: The name of the CloudWatch Event Rule that triggers the E2E test 0.
    Value:
      Ref: e2eTestRule0EDBA3FB9
  E2eTestRuleName1:
    Description: The name of the CloudWatch Event Rule that triggers the E2E test 1.
    Value:
      Ref: e2eTestRule1B9F6E07B
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Region: us-west-1
AccountId: 318364255844
